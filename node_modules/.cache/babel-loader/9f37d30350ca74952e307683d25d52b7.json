{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/larrysimiyu/Desktop/codeProjects/handTracking/handy-tool/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useRef, useState, Component } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport { drawHand } from \"./utilities\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const countRef = useRef(null);\n\n  const runHandPose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model successfully loaded\"); // loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 1000);\n  };\n\n  runHandPose();\n\n  const detect = async net => {\n    // check if data is Available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // make detections\n      // grab neural network then estimate hand within the video frame\n\n      const hand = await net.estimateHands(video);\n      console.log(hand.length);\n      console.log(hand); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandPose(); // const handleStart = () => {\n  //   // start button logic here\n  //   setIsActive(true);\n  //   setIsPaused(true);\n  //   countRef.current = setInterval(() => {\n  //     setTimer((timer) => timer + 1);\n  //   }, 1000);\n  // };\n  // const handlePause = () => {\n  //   // Pause button logic here\n  //   clearInterval(countRef.current);\n  //   setIsPaused(false);\n  // };\n  // const handleResume = () => {\n  //   // Resume button logic here\n  //   setIsPaused(true);\n  //   countRef.current = setInterval(() => {\n  //     setTimer((timer) => timer + 1);\n  //   }, 1000);\n  // };\n  // const handleReset = () => {\n  //   // Reset button logic here\n  //   clearInterval(countRef.current);\n  //   setIsActive(false);\n  //   setIsPaused(false);\n  //   setTimer(0);\n  // };\n  // const formatTime = () => {\n  //   const getSeconds = `0${timer % 60}`.slice(-2);\n  //   const minutes = `${Math.floor(timer / 60)}`;\n  //   const getMinutes = `0${minutes % 60}`.slice(-2);\n  //   const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n  //   return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  // };\n  // TODO: Check if the length of the hand array < 1. if it is then start the timer\n  // TODO: If the length of the hand is > 1 then stop the timer\n  // TODO: Once you get to the set limit of distraction then donate - minimum a dollar\n  // TODO: Timer's only reset once you have reached your study goal\n  // TODO:\n  //TIMER BUTTON - ENTER STUDY LENGTH\n  // START STOP\n  // Random Amount of Motivation Tips\n  // Hand Detection Timer - Triggered By Hand - Seconds to Minutes\n  // Warning Time (user input)\n  // Play warning audio\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WOW THIS IS TOXIC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pomodo Clock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ng/nvV8MF/LjhxE0c5o+xv5urpg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/larrysimiyu/Desktop/codeProjects/handTracking/handy-tool/src/App.js"],"names":["React","useRef","useState","Component","tf","handpose","Webcam","drawHand","App","webcamRef","canvasRef","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","runHandPose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","length","ctx","getContext","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":";;;;;AAAA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAEA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMS,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMe,QAAQ,GAAGhB,MAAM,CAAC,IAAD,CAAvB;;AAEA,QAAMiB,WAAW,GAAG,YAAY;AAC9B,UAAMC,GAAG,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAF8B,CAI9B;;AACAC,IAAAA,WAAW,CAAC,MAAM;AAChBC,MAAAA,MAAM,CAACL,GAAD,CAAN;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GARD;;AAUAD,EAAAA,WAAW;;AAGX,QAAMM,MAAM,GAAG,MAAOL,GAAP,IAAe;AAC5B;AACA,QACE,OAAOV,SAAS,CAACgB,OAAjB,KAA6B,WAA7B,IACAhB,SAAS,CAACgB,OAAV,KAAsB,IADtB,IAEAhB,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA;AACA,YAAMD,KAAK,GAAGjB,SAAS,CAACgB,OAAV,CAAkBC,KAAhC;AACA,YAAME,UAAU,GAAGnB,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,CAAwBE,UAA3C;AACA,YAAMC,WAAW,GAAGpB,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,CAAwBG,WAA5C,CAJA,CAMA;;AACApB,MAAAA,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,CAAwBI,KAAxB,GAAgCF,UAAhC;AACAnB,MAAAA,SAAS,CAACgB,OAAV,CAAkBC,KAAlB,CAAwBK,MAAxB,GAAiCF,WAAjC,CARA,CAUA;;AACAnB,MAAAA,SAAS,CAACe,OAAV,CAAkBK,KAAlB,GAA0BF,UAA1B;AACAlB,MAAAA,SAAS,CAACe,OAAV,CAAkBM,MAAlB,GAA2BF,WAA3B,CAZA,CAcA;AACA;;AACA,YAAMG,IAAI,GAAG,MAAMb,GAAG,CAACc,aAAJ,CAAkBP,KAAlB,CAAnB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAI,CAACE,MAAjB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ,EAnBA,CAqBA;;AACA,YAAMG,GAAG,GAAGzB,SAAS,CAACe,OAAV,CAAkBW,UAAlB,CAA6B,IAA7B,CAAZ;AACA7B,MAAAA,QAAQ,CAACyB,IAAD,EAAOG,GAAP,CAAR;AACD;AACF,GA/BD;;AAiCAjB,EAAAA,WAAW,GAvDE,CA2Db;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,GAAG,EAAET,SADP;AAEE,QAAA,KAAK,EAAE;AACL4B,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,UAAU,EAAE,MAFP;AAGLC,UAAAA,WAAW,EAAE,MAHR;AAILC,UAAAA,IAAI,EAAE,CAJD;AAKLC,UAAAA,KAAK,EAAE,CALF;AAMLC,UAAAA,SAAS,EAAE,QANN;AAOLC,UAAAA,MAAM,EAAE,CAPH;AAQLb,UAAAA,KAAK,EAAE,GARF;AASLC,UAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE;AACE,QAAA,GAAG,EAAErB,SADP;AAEE,QAAA,KAAK,EAAE;AACL2B,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,UAAU,EAAE,MAFP;AAGLC,UAAAA,WAAW,EAAE,MAHR;AAILC,UAAAA,IAAI,EAAE,CAJD;AAKLC,UAAAA,KAAK,EAAE,CALF;AAMLC,UAAAA,SAAS,EAAE,QANN;AAOLC,UAAAA,MAAM,EAAE,CAPH;AAQLb,UAAAA,KAAK,EAAE,GARF;AASLC,UAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAiCE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAvKQvB,G;;KAAAA,G;AAyKT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\n\nimport React, { useRef, useState, Component } from \"react\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport { drawHand } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const countRef = useRef(null);\n\n  const runHandPose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model successfully loaded\");\n\n    // loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 1000);\n  };\n\n  runHandPose()\n\n\n  const detect = async (net) => {\n    // check if data is Available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // make detections\n      // grab neural network then estimate hand within the video frame\n      const hand = await net.estimateHands(video);\n     \n      console.log(hand.length)\n      console.log(hand);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandPose()\n\n\n\n  // const handleStart = () => {\n  //   // start button logic here\n  //   setIsActive(true);\n  //   setIsPaused(true);\n  //   countRef.current = setInterval(() => {\n  //     setTimer((timer) => timer + 1);\n  //   }, 1000);\n  // };\n\n  // const handlePause = () => {\n  //   // Pause button logic here\n  //   clearInterval(countRef.current);\n  //   setIsPaused(false);\n  // };\n\n  // const handleResume = () => {\n  //   // Resume button logic here\n  //   setIsPaused(true);\n  //   countRef.current = setInterval(() => {\n  //     setTimer((timer) => timer + 1);\n  //   }, 1000);\n  // };\n\n  // const handleReset = () => {\n  //   // Reset button logic here\n  //   clearInterval(countRef.current);\n  //   setIsActive(false);\n  //   setIsPaused(false);\n  //   setTimer(0);\n  // };\n\n  // const formatTime = () => {\n  //   const getSeconds = `0${timer % 60}`.slice(-2);\n  //   const minutes = `${Math.floor(timer / 60)}`;\n  //   const getMinutes = `0${minutes % 60}`.slice(-2);\n  //   const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n\n  //   return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  // };\n\n\n\n  // TODO: Check if the length of the hand array < 1. if it is then start the timer\n  // TODO: If the length of the hand is > 1 then stop the timer\n  // TODO: Once you get to the set limit of distraction then donate - minimum a dollar\n  // TODO: Timer's only reset once you have reached your study goal\n\n  // TODO:\n  //TIMER BUTTON - ENTER STUDY LENGTH\n  // START STOP\n  // Random Amount of Motivation Tips\n\n  // Hand Detection Timer - Triggered By Hand - Seconds to Minutes\n  // Warning Time (user input)\n  // Play warning audio\n\n  return (\n    <div className=\"App\">\n      <h1>WOW THIS IS TOXIC</h1>\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n      <div className=\"main\">\n        <h1>Pomodo Clock</h1>\n      </div>\n      {/* <p>{formatTime()}</p> {/* here we will show timer */}\n      {/* <div className=\"buttons\">\n        {!isActive && !isPaused ? (\n          <button onClick={handleStart}>Start</button>\n        ) : isPaused ? (\n          <button onClick={handlePause}>Pause</button>\n        ) : (\n          <button onClick={handleResume}>Resume</button>\n        )}\n        <button onClick={handleReset} disabled={!isActive}>\n          Reset\n        </button> \n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
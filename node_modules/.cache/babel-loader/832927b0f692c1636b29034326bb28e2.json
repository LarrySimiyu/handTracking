{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/larrysimiyu/Desktop/codeProjects/handTracking/handy-tool/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useRef } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandPose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model successfully loaded\"); // loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async net => {\n    // check if data is Available\n    if (typeof webcamRef.current !== \"undefined\" // check that webcam is not undefined\n    && webcamRef.current !== null // check that webcam is not null \n    && webcamRef.current.video.readyState === 4 //check that we are receiving data \n    ) {\n        // get video properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight; // set video height and width\n\n        webcamRef.current.video.videoHeight = videoWidth;\n        webcamRef.current.video.videoHeight = videoHeight; // canvas height and width \n\n        canvasRef.current.width = videoWidth;\n        canvasRef.current.height = videoHeight; // make detections \n        // grab neural network then estimate haßnd within the video frame\n\n        const hand = await net.estimateHands(video);\n        console.log(hand); // Draw mesh\n      }\n  };\n\n  runHandPose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/larrysimiyu/Desktop/codeProjects/handTracking/handy-tool/src/App.js"],"names":["React","useRef","tf","handpose","Webcam","App","webcamRef","canvasRef","runHandPose","net","load","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","hand","estimateHands","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import './App.css';\n\nimport React, {useRef} from 'react';\n\nimport * as tf from \"@tensorflow/tfjs\"\nimport * as handpose from \"@tensorflow-models/handpose\"\nimport Webcam from \"react-webcam\";\n\nfunction App() {\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandPose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model successfully loaded\")\n\n    // loop and detect hands\n    setInterval(()=>{\n      detect(net);\n    },100)\n  }\n\n  const detect = async (net) => {\n    // check if data is Available\n\n    if(\n\n      typeof webcamRef.current !== \"undefined\" // check that webcam is not undefined\n      && webcamRef.current !== null  // check that webcam is not null \n      && webcamRef.current.video.readyState === 4 //check that we are receiving data \n    ) {\n      // get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // set video height and width\n      webcamRef.current.video.videoHeight = videoWidth;\n      webcamRef.current.video.videoHeight = videoHeight;\n\n      // canvas height and width \n      canvasRef.current.width = videoWidth\n      canvasRef.current.height = videoHeight\n\n      // make detections \n      // grab neural network then estimate haßnd within the video frame\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n      // Draw mesh\n    }\n  }\n\n  runHandPose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam \n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n            ref={canvasRef}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 0,\n              right: 0,\n              textAlign: \"center\",\n              zindex: 9,\n              width: 640,\n              height: 480,\n            }}\n        \n        />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}